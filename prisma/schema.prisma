// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum AssetCategory {
  APPLIANCE
  HVAC
  PLUMBING
  ELECTRICAL
  STRUCTURAL
  OUTDOOR
  OTHER
}

enum Frequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  SEMIANNUAL
  ANNUAL
  CUSTOM
}

enum Difficulty {
  EASY
  MODERATE
  HARD
  PROFESSIONAL
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
  CANCELLED
}

enum NotificationType {
  EMAIL
  PUSH
  SMS
}

enum NotificationStatus {
  SENT
  FAILED
  PENDING
}

enum ActivityType {
  ASSET_CREATED
  ASSET_UPDATED
  ASSET_DELETED
  TASK_CREATED
  TASK_COMPLETED
  TASK_OVERDUE
  TEMPLATE_APPLIED
  SCHEDULE_CREATED
  SCHEDULE_UPDATED
}

// NextAuth.js Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials provider
  accounts      Account[]
  sessions      Session[]

  // User preferences
  requireCompletionPhoto Boolean @default(false) // Require photo when completing tasks
  dashboardLayout        String? // JSON stored as string - customizable widget positions and visibility
  maintenanceBudget      Float? // Monthly maintenance budget
  budgetStartDate        DateTime? // When budget tracking began

  homes         Home[]
  notifications Notification[]
  activityLogs  ActivityLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// CMMS Models
model Home {
  id        String   @id @default(cuid())
  userId    String
  name      String
  address   String?  // JSON stored as string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets       Asset[]
  tasks        Task[]
  activityLogs ActivityLog[]

  @@index([userId])
}

model Asset {
  id                String        @id @default(cuid())
  homeId            String
  name              String
  category          AssetCategory
  modelNumber       String?
  serialNumber      String?
  purchaseDate      DateTime?
  warrantyExpiryDate DateTime?
  photoUrl          String?
  metadata          String?       // JSON stored as string
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  home              Home               @relation(fields: [homeId], references: [id], onDelete: Cascade)
  tasks             Task[]
  recurringSchedules RecurringSchedule[]

  @@index([homeId])
  @@index([category])
}

model MaintenanceTemplate {
  id                      String     @id @default(cuid())
  name                    String
  description             String
  category                AssetCategory
  defaultFrequency        Frequency
  estimatedDurationMinutes Int       // Required, not optional
  difficulty              Difficulty // Renamed from difficultyLevel
  instructions            String?    // JSON stored as string
  requiredTools           String?    // JSON stored as string
  safetyPrecautions       String?    // JSON stored as string
  isSystemTemplate        Boolean    @default(true)
  isActive                Boolean    @default(true)
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt

  tasks              Task[]
  recurringSchedules RecurringSchedule[]

  @@index([category])
  @@index([isSystemTemplate, isActive])
}

model Task {
  id               String     @id @default(cuid())
  homeId           String
  assetId          String?
  templateId       String?
  title            String
  description      String?
  dueDate          DateTime
  priority         Priority   @default(MEDIUM)
  status           TaskStatus @default(PENDING)
  completedAt      DateTime?
  completedBy      String?
  completionNotes  String?
  completionPhotos String?    // JSON array stored as string
  estimatedCost    Float?     // Expected cost for this task
  actualCost       Float?     // Actual cost after completion
  costNotes        String?    // Notes about costs
  notes            String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  home         Home                  @relation(fields: [homeId], references: [id], onDelete: Cascade)
  asset        Asset?                @relation(fields: [assetId], references: [id], onDelete: SetNull)
  template     MaintenanceTemplate?  @relation(fields: [templateId], references: [id], onDelete: SetNull)
  notifications Notification[]

  @@index([homeId])
  @@index([assetId])
  @@index([status])
  @@index([dueDate])
  @@index([completedAt])
  @@index([homeId, status])
}

model RecurringSchedule {
  id                  String    @id @default(cuid())
  templateId          String
  assetId             String
  frequency           Frequency
  customFrequencyDays Int?      // For custom frequencies
  nextDueDate         DateTime
  lastCompletedDate   DateTime? // Track last completion
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  template MaintenanceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  asset    Asset               @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@unique([assetId, templateId])
  @@index([assetId])
  @@index([templateId])
  @@index([nextDueDate, isActive])
}

model Notification {
  id       String             @id @default(cuid())
  userId   String
  taskId   String
  type     NotificationType
  status   NotificationStatus @default(PENDING)
  sentAt   DateTime?
  metadata String?            // JSON stored as string
  createdAt DateTime          @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([taskId])
  @@index([status])
}

model ActivityLog {
  id           String       @id @default(cuid())
  userId       String
  homeId       String
  activityType ActivityType
  entityType   String       // "asset", "task", "template", etc.
  entityId     String
  entityName   String       // Denormalized for performance
  description  String
  metadata     String?      // JSON stored as string - additional context
  createdAt    DateTime     @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  home Home @relation(fields: [homeId], references: [id], onDelete: Cascade)

  @@index([homeId, createdAt])
  @@index([userId, createdAt])
}
